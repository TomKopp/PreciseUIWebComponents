import {LitElement} from 'lit-element';
import {MDCFoundation} from '@material/base';
import {Constructor} from './utils.js';

export * from 'lit-element';
export {classMap} from 'lit-html/directives/class-map.js';
export {observer} from './observer.js';
export {addHasRemoveClass} from './utils.js';
export * from '@material/base/types.js';

export abstract class BaseElement extends LitElement {

  /**
   * Root element for MDC Foundation usage.
   *
   * Define in your component with the `@query` decorator
   */
  protected abstract mdcRoot: HTMLElement;

  /**
   * Return the foundation class for this component
   */
  protected abstract readonly mdcFoundationClass: Constructor<MDCFoundation>;

  /**
   * An instance of the MDC Foundation class to attach to the root element
   */
  protected abstract mdcFoundation: MDCFoundation;

  /**
   * Create the adapter for the `mdcFoundation`.
   *
   * Override and return an object with the Adapter's functions implemented:
   *
   *    {
   *      addClass: () => {},
   *      removeClass: () => {},
   *      ...
   *    }
   */
  protected abstract createAdapter(): {}

  /**
   * Create and attach the MDC Foundation to the instance
   */
  protected createFoundation() {
    if (this.mdcFoundation !== undefined) {
      this.mdcFoundation.destroy();
    }
    this.mdcFoundation = new this.mdcFoundationClass(this.createAdapter());
    this.mdcFoundation.init();
  }

  firstUpdated() {
    this.createFoundation();
  }
}





import {BaseElement} from './base-element';
export * from './base-element';

export interface RippleSurface {
  activate(): void;
  deactivate(): void;
}

export interface HTMLElementWithRipple extends HTMLElement {
  ripple?: RippleSurface;
}

export abstract class FormElement extends BaseElement {
  /**
   * Form-capable element in the component ShadowRoot.
   *
   * Define in your component with the `@query` decorator
   */
  protected abstract formElement: HTMLElement;

  createRenderRoot() {
    return this.attachShadow({mode: 'open', delegatesFocus: true});
  }

  /**
   * Implement ripple getter for Ripple integration with mwc-formfield
   */
  readonly ripple?: RippleSurface;

  click() {
    if (this.formElement) {
      this.formElement.focus();
      this.formElement.click();
    }
  }

  setAriaLabel(label: string) {
    if (this.formElement) {
      this.formElement.setAttribute('aria-label', label);
    }
  }

  firstUpdated() {
    super.firstUpdated();
    this.mdcRoot.addEventListener('change', e => {
      this.dispatchEvent(new Event('change', e));
    });
  }
}





import {FormElement, html, query, property, classMap, addHasRemoveClass} from '@material/mwc-base/form-element.js';
import MDCTextFieldFoundation from '@material/textfield/foundation.js';
import {MDCTextFieldAdapter, MDCTextFieldLineRippleAdapter} from '@material/textfield/adapter.js';
import {MDCFloatingLabelFoundation} from '@material/floating-label/foundation.js';
import {MDCFloatingLabelAdapter} from '@material/floating-label/adapter.js';
import {MDCLineRippleFoundation} from '@material/line-ripple/foundation.js';
import {MDCLineRippleAdapter} from '@material/line-ripple/adapter.js';
import {MDCNotchedOutlineAdapter} from '@material/notched-outline/adapter.js';
import {MDCNotchedOutlineFoundation} from '@material/notched-outline/foundation.js';
import {MDCTextFieldCharacterCounter} from '@material/textfield/character-counter';

const passiveEvents = ['touchstart', 'touchmove', 'scroll', 'mousewheel'];

export abstract class TextFieldBase extends FormElement {
  protected mdcFoundation!: MDCTextFieldFoundation;
  protected mdcFloatingLabelFoundation!: MDCFloatingLabelFoundation;

  protected readonly mdcFoundationClass = MDCTextFieldFoundation;

  @query('.mdc-text-field')
  protected mdcRoot!: HTMLElement;

  @query('input')
  protected formElement!: HTMLInputElement;

  @query('.mdc-floating-label')
  protected labelElement!: HTMLLabelElement;

  @query('.mdc-line-ripple')
  protected lineRippleElement!: HTMLElement;

  @query('.mdc-notched-outline')
  protected outlineElement!: HTMLElement;

  @query('.mdc-notched-outline__notch')
  protected notchElement!: HTMLElement;

  @query('.mdc-text-field-character-counter')
  protected charCounterElement!: HTMLElement;

  @property()
  value = '';

  @property()
  type = 'text';

  @property()
  placeholder = '';

  @property()
  label = '';

  @property()
  icon = '';

  @property()
  iconTrailing = '';

  @property({type: Boolean, reflect: true})
  disabled = false;

  @property({type: Boolean})
  required = false;

  @property({type: Number})
  maxlength = -1;

  @property({type: Boolean, reflect: true})
  outlined = false;

  @property({type: Boolean, reflect: true})
  fullWidth = false;

  @property()
  helper = '';

  @property({type: Boolean})
  helperPersistent = false;

  @property({type: Boolean})
  charCounter = false;

  protected _floatingLabelFoundation: MDCFloatingLabelFoundation | null = null;
  protected _lineRippleFoundation: MDCLineRippleFoundation | null = null;
  protected _outlineFoundation: MDCNotchedOutlineFoundation | null = null;
  protected _characterCounter: MDCTextFieldCharacterCounter | null = null;

  render() {
    const classes = {
      'mdc-text-field--disabled': this.disabled,
      'mdc-text-field--no-label': !this.label,
      'mdc-text-field--outlined': this.outlined,
      'mdc-text-field--fullwidth': this.fullWidth,
      'mdc-text-field--with-leading-icon': this.icon,
      'mdc-text-field--with-trailing-icon': this.iconTrailing,
    };
    return html`
      <label class="mdc-text-field ${classMap(classes)}">
        ${this.icon ? this.renderIcon(this.icon) : ''}
        ${this.renderInput()}
        ${this.iconTrailing ? this.renderIcon(this.iconTrailing) : ''}
        ${this.outlined ? this.renderOutlined() : this.renderLabelText()}
      </label>
      ${(this.helper || this.charCounter) ? this.renderHelperText() : ''}
    `;
  }

  protected renderInput() {
    return html`
      <input id="text-field"
             class="mdc-text-field__input"
             type="${this.type}"
             .value="${this.value}"
             ?disabled="${this.disabled}"
             placeholder="${this.placeholder}"
             ?required="${this.required}"
             maxlength="${this.maxlength}"
             @change="${this.handleInputChange}">`;
  }

  protected renderIcon(icon: String) {
    return html`<i class="material-icons mdc-text-field__icon">${icon}</i>`;
  }

  protected renderOutlined() {
    return html`
      <div class="mdc-notched-outline">
        <div class="mdc-notched-outline__leading"></div>
        ${this.label ? html`<div class="mdc-notched-outline__notch">
          <span class="mdc-floating-label">${this.label}</span>
        </div>` : ''}
        <div class="mdc-notched-outline__trailing"></div>
      </div>`;
  }

  protected renderLabelText() {
    return html`
      ${this.label && !this.fullWidth ? html`<span class="mdc-floating-label">${this.label}</span>` : ''}
      <div class="mdc-line-ripple"></div>
    `;
  }

  protected renderHelperText() {
    const classes = {
      'mdc-text-field-helper-text--persistent': this.helperPersistent,
    };
    return html`
      <div class="mdc-text-field-helper-line">
        <div class="mdc-text-field-helper-text ${classMap(classes)}">${this.helper}</div>
        ${this.charCounter ? html`<div class="mdc-text-field-character-counter"></div>` : ''}
      </div>
    `;
  }

  protected handleInputChange() {
    this.value = this.formElement.value;
  }

  protected createFoundation() {
    if (this.labelElement) {
      this.createFloatingTextLabelFoundation();
    }

    if (this.lineRippleElement) {
      this.createLineRippleFoundation();
    }

    if (this.outlineElement) {
      this.createNotchedOutlineFoundation();
    }

    if (this.mdcFoundation !== undefined) {
      this.mdcFoundation.destroy();
    }
    this._characterCounter = this.charCounterElement ? new MDCTextFieldCharacterCounter(this.charCounterElement) : null;
    this.mdcFoundation = new this.mdcFoundationClass(this.createAdapter(), {
      characterCounter: this._characterCounter ? this._characterCounter.foundation : undefined
    });
    this.mdcFoundation.init();
  }

  protected createFloatingTextLabelFoundation() {
    const adapter = this.getFloatingLabelAdapter();
    this._floatingLabelFoundation = new MDCFloatingLabelFoundation(adapter);
  }

  protected createLineRippleFoundation() {
    const adapter = this.getLineRippleAdapter();
    this._lineRippleFoundation = new MDCLineRippleFoundation(adapter);
  }

  protected createNotchedOutlineFoundation() {
    const adapter = this.getNotchedOutlineAdapter();
    this._outlineFoundation = new MDCNotchedOutlineFoundation(adapter);
  }

  protected getFloatingLabelAdapter(): MDCFloatingLabelAdapter {
    return {
      addClass: className => this.labelElement.classList.add(className),
      removeClass: className => this.labelElement.classList.remove(className),
      getWidth: () => this.labelElement ? this.labelElement.scrollWidth : 0,
      registerInteractionHandler: (evtType, handler) => {this.labelElement.addEventListener(evtType, handler)},
      deregisterInteractionHandler: (evtType, handler) => {this.labelElement.removeEventListener(evtType, handler)},
    };
  }

  protected getLineRippleAdapter(): MDCLineRippleAdapter {
    return {
      addClass: className => this.lineRippleElement.classList.add(className),
      removeClass: className => this.lineRippleElement.classList.remove(className),
      hasClass: className => this.lineRippleElement.classList.contains(className),
      setStyle: (propName, value) => this.lineRippleElement.style.setProperty(propName, value),
      registerEventHandler: (evtType, handler) => {this.lineRippleElement.addEventListener(evtType, handler)},
      deregisterEventHandler: (evtType, handler) => {this.lineRippleElement.removeEventListener(evtType, handler)},
    };
  }

  protected getNotchedOutlineAdapter(): MDCNotchedOutlineAdapter {
    return {
      addClass: className => this.outlineElement.classList.add(className),
      removeClass: className => this.outlineElement.classList.remove(className),
      setNotchWidthProperty: width => this.notchElement ? this.notchElement.style.setProperty('width', `${width}px`) : null,
      removeNotchWidthProperty: () => this.notchElement ? this.notchElement.style.removeProperty('width') : null,
    };
  }

  protected createAdapter(): MDCTextFieldAdapter {
    return {
      ...addHasRemoveClass(this.mdcRoot),
      ...this.getRootAdapterMethods(),
      ...this.getInputAdapterMethods(),
      ...this.getLabelAdapterMethods(),
      ...this.getLineRippleAdapterMethods(),
      ...this.getOutlineAdapterMethods(),
    };
  }

  protected getRootAdapterMethods() {
    return {
      registerTextFieldInteractionHandler: (evtType: string,
          handler: any) => this.addEventListener(evtType, handler),
      deregisterTextFieldInteractionHandler: (evtType: string,
          handler: any) => this.removeEventListener(evtType, handler),
      registerValidationAttributeChangeHandler: (handler: any) => {
        const getAttributesList = (mutationsList: MutationRecord[]): string[] => {
          return mutationsList
              .map((mutation) => mutation.attributeName)
              .filter((attributeName) => attributeName) as string[];
        };
        const observer = new MutationObserver((mutationsList) => handler(getAttributesList(mutationsList)));
        const config = {attributes: true};
        observer.observe(this.formElement, config);
        return observer;
      },
      deregisterValidationAttributeChangeHandler: (observer: MutationObserver) => observer.disconnect(),
    };
  }

  protected getInputAdapterMethods() {
    return {
      getNativeInput: () => this.formElement,
      isFocused: () => this.shadowRoot!.activeElement === this.formElement,
      registerInputInteractionHandler: (evtType: string,
          handler: any) => this.formElement.addEventListener(evtType, handler, {passive: evtType in passiveEvents}),
      deregisterInputInteractionHandler: (evtType: string,
          handler: any) => this.formElement.removeEventListener(evtType, handler),
    };
  }

  protected getLabelAdapterMethods() {
    return {
      floatLabel: (shouldFloat: boolean) => this._floatingLabelFoundation && this._floatingLabelFoundation.float(shouldFloat),
      getLabelWidth: () => this._floatingLabelFoundation ? this._floatingLabelFoundation.getWidth() : 0,
      hasLabel: () => Boolean(this._floatingLabelFoundation),
      shakeLabel: (shouldShake: boolean) => this._floatingLabelFoundation && this._floatingLabelFoundation.shake(shouldShake),
    };
  }

  protected getLineRippleAdapterMethods(): MDCTextFieldLineRippleAdapter {
    return {
      activateLineRipple: () => {
        if (this._lineRippleFoundation) {
          this._lineRippleFoundation.activate();
        }
      },
      deactivateLineRipple: () => {
        if (this._lineRippleFoundation) {
          this._lineRippleFoundation.deactivate();
        }
      },
      setLineRippleTransformOrigin: (normalizedX: number) => {
        if (this._lineRippleFoundation) {
          this._lineRippleFoundation.setRippleCenter(normalizedX);
        }
      },
    };
  }

  protected getOutlineAdapterMethods() {
    return {
      closeOutline: () => this._outlineFoundation && this._outlineFoundation.closeNotch(),
      hasOutline: () => Boolean(this._outlineFoundation),
      notchOutline: (labelWidth: number) => this._outlineFoundation && this._outlineFoundation.notch(labelWidth),
    };
  }
}
