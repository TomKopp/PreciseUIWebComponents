import { InputType, AutocompleteValue } from '../../types';
import { BaseElement } from '../Base/base-element';
export declare class TextField extends BaseElement {
    private _formElement;
    readonly formElement: HTMLInputElement | HTMLTextAreaElement;
    private _labelElem;
    readonly labelElement: HTMLLabelElement;
    private _autocomplete;
    autocomplete: AutocompleteValue;
    private _autofocus;
    autofocus: boolean;
    private _disabled;
    disabled: boolean;
    private _form;
    private _list;
    private _name;
    name: string;
    private _readOnly;
    readOnly: boolean;
    private _required;
    required: boolean;
    private _type;
    type: InputType;
    private _value;
    value: string;
    private _placeholder;
    placeholder: string;
    private _multiline;
    multiline: number | boolean;
    borderless: boolean;
    className: string;
    clearable: boolean;
    defaultValue: string;
    error: string;
    icon: any;
    info: string;
    label: string;
    maxLength: number;
    minLenght: number;
    prefix: string;
    resizable: 'both' | 'horizontal' | 'vertical' | 'none';
    protected renderStyle(): string;
    private renderIcon;
    private renderAttributes;
    private renderInput;
    private renderTextarea;
    renderTemplate(): string;
    static readonly observedAttributes: string[];
    attributeChangedCallback(attrName: string, oldValue: any, newValue: string): void;
    forwardProperty(targetElement: HTMLElement, key: string | number, val: any): void;
    preCommitHook(): void;
}
