{"version":3,"file":"index.iife.js","sources":["../src/utility.ts","../src/decorators.ts","../src/components/Base/base-element.ts","../src/components/TextField/text-field.ts","../src/components/Card/card.ts","../src/components/Container/container.ts","../src/components/ContentSwitch/content-switch.ts"],"sourcesContent":["/**\n * @module utility\n */\n// eslint-disable-next-line\nexport function noop() { }\n\n/**\n * Returns the value\n *\n * @exports\n * @param {*} val any value\n * @returns {*} the exat same value\n */\nexport function identity(val: any) { return val; }\n\n/**\n * Converts an attribute string value to boolean\n *\n * @exports\n * @param {string} val attribute value\n * @returns {boolean} boolean interpretation of attribute\n */\nexport function attr2bool(val: string) { return val !== null; }\n\n/**\n * Converts a boolean value to a boolean attribute value\n *\n * @exports\n * @param {boolean} val a boolean\n * @returns {(string | null)} empty strign if attribute should exist, else null\n */\nexport function bool2attr(val: boolean) { return val ? '' : null; }\n\n/**\n * Wrapper around Object.is\n *\n * @exports\n * @param {*} oldValue old value\n * @param {*} newValue new value\n * @returns {boolean} true if old and new are NOT the same value\n */\nexport function isDifferent(oldValue: any, newValue: any) { return !Object.is(oldValue, newValue); }\n\nexport const debounce = (func: Function, wait: number, immediate = false) => {\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  let timeout: number | null;\n\n  return function debounced(...args: any[]) {\n    const later = () => {\n      timeout = null;\n      //@ts-ignore\n      if (!immediate) { func.apply(this, args); }\n    };\n\n    const callNow = immediate && !timeout;\n    //@ts-ignore\n    clearTimeout(timeout);\n    //@ts-ignore\n    timeout = setTimeout(later, wait);\n\n    //@ts-ignore\n    if (callNow) { func.apply(this, args); }\n  };\n};\n\nexport const rAFthrottle = (func: Function, immediate = false) => {\n\tif (typeof func !== 'function') {\n\t\tthrow new TypeError('Expected a function');\n\t}\n\n\tlet rAFid: number | null;\n\n\treturn function throttled(...args: any[]) {\n\t\tconst later = () => {\n\t\t\trAFid = null;\n      //@ts-ignore\n\t\t\tif (!immediate) { func.apply(this, args); }\n\t\t};\n\t\tconst callNow = immediate && !rAFid;\n\n\t\tif (!rAFid) { rAFid = requestAnimationFrame(later); }\n    //@ts-ignore\n\t\tif (callNow) { func.apply(this, args); }\n\t};\n};\n\n/**\n * PropertyDeclaration\n *\n * @typedef PropertyDeclaration\n * @type {object}\n * @property {boolean} [observe] Flag indicating that this property will be monitored for changes\n * @property {boolean} [reflect] Flag indicatin that this property will be reflected as attribute\n * @property {Function} [prop2attr] Converts the property to an attribute\n * @property {Function} [attr2prop] Converts the attribute to a property\n * @property {Function} [modified] Tells if the value was modified\n */\nexport interface PropertyDeclaration {\n  observe?: boolean\n  , reflect?: boolean\n  , prop2attr?: Function\n  , attr2prop?: Function\n  , modified?: Function\n}\n\n/**\n * @exports\n * @type {PropertyDeclaration}\n * @property {boolean} [observe=true]\n * @property {boolean} [reflect=false]\n * @property {Function} [prop2attr=identity]\n * @property {Function} [attr2prop=identity]\n * @property {Function} [modified=isDifferent]\n */\nexport const defaultPropertyDeclaration = {\n  observe: true\n  , reflect: false\n  , prop2attr: identity\n  , attr2prop: identity\n  , modified: isDifferent\n};\n","import { PropertyDeclaration } from './utility';\nimport { BaseElement } from './components/Base/base-element';\n\n/**\n * @module decorators\n */\n/**\n * Class decorator to define a custom element\n *\n * @exports\n * @param {*} name tag name of the custom element\n * @param {*} options options parameter that is passed to the define function\n * @returns {Function} the actual decorator\n */\nexport function defineElement(name: string, options?: ElementDefinitionOptions) {\n\treturn function (classDescriptor: any) {\n\t\tclassDescriptor.finisher = function finisher(classConstructor: Function) {\n\t\t\tcustomElements.define(name, classConstructor, options);\n\t\t};\n\t\treturn classDescriptor;\n\t};\n}\n\n/**\n * Property decorator that augments the property with accessors and asignes some lifecycle options\n *\n * @exports\n * @param {module:utility.PropertyDeclaration} propertyDeclaration lifecycle options\n * @returns {Function} the actual decorator\n */\nexport function property(propertyDeclaration?: PropertyDeclaration) {\n  // TC39 descriptor. see https://github.com/tc39/proposal-decorators/blob/master/NEXTBUILTINS.md\n  // Second parameter (name) just to please TypeScript...\n\treturn function (propertyDescriptor: any, name?: PropertyKey) {\n\n\t\t// If the decorator is invoked on an field property it generates accessors with that name\n\t\t// and a somewhat hidden storage property.\n\t\t// The accessors are necessary to react on property changes with an render update.\n\t\tif (propertyDescriptor.kind === 'field') {\n\t\t\tconst propertyKey = `__${propertyDescriptor.key}`;\n\t\t\tpropertyDescriptor.extras = [\n\t\t\t\t{\n\t\t\t\t\tkey: propertyKey\n\t\t\t\t\t, kind: propertyDescriptor.kind\n\t\t\t\t\t, placement: propertyDescriptor.placement\n\t\t\t\t\t, initializer: propertyDescriptor.initializer\n\t\t\t\t\t, descriptor: {\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t\t, enumerable: true\n\t\t\t\t\t\t, writable: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tpropertyDescriptor.kind = 'method';\n\t\t\tpropertyDescriptor.placement = 'prototype';\n\t\t\tdelete propertyDescriptor.initializer;\n\t\t\tpropertyDescriptor.descriptor = {\n\t\t\t\tget() { return this[propertyKey]; }\n\t\t\t\t, set(val: any) {\n\t\t\t\t\tconst oldVal = this[propertyKey];\n\t\t\t\t\tthis[propertyKey] = val;\n\t\t\t\t\tthis.requestUpdate(propertyDescriptor.key, oldVal, val);\n\t\t\t\t}\n\t\t\t\t, configurable: true\n\t\t\t\t, enumerable: true\n\t\t\t};\n\t\t}\n\t\tpropertyDescriptor.finisher = function finisher(classConstructor: typeof BaseElement) {\n\t\t\tclassConstructor.addClassProperty(propertyDescriptor.key, propertyDeclaration);\n\t\t};\n\t\treturn propertyDescriptor;\n\t};\n}\n","import { PropertyDeclaration, defaultPropertyDeclaration, identity, isDifferent, rAFthrottle } from '../../utility';\n\nexport * from './../../decorators';\nexport * from '../../utility';\n\n\n/**\n * @module BaseElement\n */\n\n\n//* Class *********************************************************************\n/**\n * Base class for web components\n *\n * @exports\n * @class BaseElement\n * @extends {HTMLElement}\n */\nexport class BaseElement extends HTMLElement {\n  //* Constructor ***********************************************************\n  constructor() {\n    // If you define a constructor, always call super() first to apply the right property chain!\n    // This is specific to custom elements and required by the spec.\n    super();\n\n    this.attachShadow({ mode: 'open' });\n    if (!this.shadowRoot) {\n      this._renderRoot = this;\n      throw new Error('No ShadowRoot');\n    }\n    this._renderRoot = this.shadowRoot;\n  }\n\n\n\n  //* Properties/Getter/Setter **********************************************\n  // TS mockery...\n  // ['constructor']: typeof BaseElement;\n\n\t/**\n\t * Specify observed attributes names to be notified in attributeChangedCallback\n\t *\n\t * @readonly\n\t * @protected\n\t * @static\n\t * @returns {string[]} array of property names that will be observed as attributes\n\t * @memberof BaseElement\n\t */\n  static get observedAttributes(): string[] {\n    const ret: string[] = [];\n    this.classProperties.forEach((propertyDeclaration, propertyKey) => {\n      if (propertyDeclaration.observe && typeof propertyKey === 'string') { ret.push(propertyKey); }\n    });\n    return ret;\n  }\n\n  // static get templateProperties() {\n  // \tconst ret = [];\n  // \tthis._classProperties.forEach((propertyDeclaration, propertyKey) => {\n  // \t\tif ((propertyDeclaration.observe || propertyDeclaration.templateProp)\n  // \t\t\t&& typeof propertyKey === 'string'\n  // \t\t) { ret.push(propertyKey); }\n  // \t});\n  // \treturn ret;\n  // }\n\n  // static get styleProperties() {\n  // \tconst ret = [];\n  // \tthis._classProperties.forEach((propertyDeclaration, propertyKey) => {\n  // \t\tif ((propertyDeclaration.observe || propertyDeclaration.styleProp)\n  // \t\t\t&& typeof propertyKey === 'string'\n  // \t\t) { ret.push(propertyKey); }\n  // \t});\n  // \treturn ret;\n  // }\n\n\t/**\n\t * Protected map of properties of the class with special flags.\n\t *\n\t * @readonly\n\t * @static\n\t * @returns {Map.<(string|number|symbol), module:utility.PropertyDeclaration>} property key - property decaration map\n\t * @memberof BaseElement\n\t */\n  static get classProperties(): Map<PropertyKey, PropertyDeclaration> {\n    if (!Object.prototype.hasOwnProperty.call(this, '_classProperties')) {\n      Object.defineProperty(this, '_classProperties', { enumerable: true, value: new Map() });\n    }\n    //@ts-ignore\n    return this._classProperties;\n  }\n\n  static addClassProperty(propertyKey: string, propertyDeclaration?: PropertyDeclaration) {\n    this.classProperties.set(propertyKey, Object.assign({}, defaultPropertyDeclaration, propertyDeclaration));\n  }\n\n\t/**\n\t * Protected property that holds a reference where to render the DOM to.\n\t *\n\t * @protected\n\t * @type {(HTMLElement | ShadowRoot)}\n\t * @memberof BaseElement\n\t */\n  _renderRoot: (HTMLElement | ShadowRoot);\n\n\t/**\n\t * Flag to indicate a scheduled requestAnimationFrame\n\t *\n\t * @protected\n\t * @type {Function}\n\t * @memberof BaseElement\n\t */\n  _rAFScheduled = rAFthrottle(this.render.bind(this));\n\n\t/**\n\t * Template element\n\t *\n\t * @protected\n\t * @type {HTMLTemplateElement | undefined}\n\t * @memberof BaseElement\n\t */\n  _template: HTMLTemplateElement | undefined;\n\n\t/**\n\t * Get the internal template\n\t *\n\t * @readonly\n\t * @returns {HTMLTemplateElement} template\n\t * @memberof BaseElement\n\t */\n  get template(): HTMLTemplateElement {\n    if (!this._template) { this._template = document.createElement('template'); }\n    return this._template;\n  }\n\n\t/**\n\t * Style element\n\t *\n\t * @protected\n\t * @type {HTMLStyleElement | undefined}\n\t * @memberof BaseElement\n\t */\n  _styleElement: HTMLStyleElement | undefined;\n\n\t/**\n\t * get the internal style\n\t *\n\t * @readonly\n\t * @returns {HTMLStyleElement} style\n\t * @memberof BaseElement\n\t */\n  get styleElement(): HTMLStyleElement {\n    if (!this._styleElement) { this._styleElement = document.createElement('style'); }\n    return this._styleElement;\n  }\n\n\n\n  //* Template ****************************************************************\n\t/**\n\t * Override to set a template\n\t *\n\t * @abstract\n\t * @example return '<div><slot name=test></slot></div>';\n\t * @returns {string} the template string\n\t * @memberof BaseElement\n\t */\n  updateTemplate(): string { throw new Error('must be implemented by subclass!'); }\n\n\t/**\n\t * Override to set the style element\n\t *\n\t * @abstract\n\t * @example return 'div {background-color: blue;}'\n\t * @returns {string} css ruleset\n\t * @memberof BaseElement\n\t */\n  updateStyle(): string { throw new Error('must be implemented by subclass!'); }\n\n\t/**\n\t * Sets or removes attributes of the component, based on the 'reflect' flag of the property.\n\t *\n\t * @protected\n\t * @memberof BaseElement\n\t */\n  reflectAttributes() {\n    const reflector = (propertyDeclaration: PropertyDeclaration, propertyKey: PropertyKey) => {\n      if (!propertyDeclaration.reflect || typeof propertyKey !== 'string') { return; }\n\n      const { prop2attr = identity } = propertyDeclaration;\n      const prop = prop2attr.call(this, this[propertyKey as keyof BaseElement]);\n\n      if (prop === null) { this.removeAttribute(propertyKey as string); }\n      else { this.setAttribute(propertyKey as string, prop); }\n    };\n\n    (this.constructor as typeof BaseElement).classProperties.forEach(reflector);\n  }\n\n\n\n  //* Obervers/Handlers *****************************************************\n\t/**\n\t * Called when an observed attribute has been added, removed, updated, or replaced.\n\t * Also called for initial values when an element is created by the parser, or upgraded.\n\t * Note: only attributes listed in the observedAttributes property will receive this callback.\n\t *\n\t * @param {string} attrName attribute name\n\t * @param {(string | null)} oldValue old value of the attribute\n\t * @param {(string | null)} newValue new value of the attribute\n\t * @memberof BaseElement\n\t */\n  attributeChangedCallback(attrName: string, oldValue: (string | null), newValue: (string | null)) {\n    if (oldValue === newValue) { return; }\n    const { attr2prop = identity } = (this.constructor as typeof BaseElement).classProperties.get(attrName) || defaultPropertyDeclaration;\n    //@ts-ignore\n    this[attrName] = attr2prop.call(this, newValue);\n  }\n\n\n\n  //* Life Cycle Callbacks **************************************************\n\t/**\n\t * Invoked each time the custom element is appended into a document-connected\n\t * element. This will happen each time the node is moved, and may happen before\n\t * the element's contents have been fully parsed.\n\t *\n\t * Useful for running setup code, such as fetching resources or rendering.\n\t * Generally, you should try to delay work until this time.\n\t *\n\t * @memberof BaseElement\n\t */\n  connectedCallback() {\n    if (!this.isConnected) { return; }\n\n    // First render\n    this.styleElement.innerHTML = this.updateStyle();\n    this.template.innerHTML = this.updateTemplate();\n    this.requestRender(true, true, true);\n  }\n\n\t/**\n\t * Invoked each time the custom element is disconnected from the document's DOM.\n\t * Useful for running clean up code.\n\t *\n\t * @memberof BaseElement\n\t */\n  // disconnectedCallback() {}\n\n\t/**\n\t * Invoked each time the custom element is moved to a new document.\n\t *\n\t * @memberof BaseElement\n\t */\n  // adoptedCallback() {}\n\n\t/**\n\t * Invoked if custom elem is \"form-associative = true\".\n\t *\n\t * @memberof BaseElement\n\t */\n  // formResetCallback() {}\n\n\t/**\n\t * Requests an update of the component. Checks if the value changed.\n\t *\n\t * @param {string} propertyKey property name\n\t * @param {*} oldValue old value of the property\n\t * @param {*} newValue new value of the property\n\t * @memberof BaseElement\n\t */\n  requestUpdate(propertyKey: string, oldValue: any, newValue: any) {\n    const {\n      modified = isDifferent\n      // , templateProp = false\n      // , styleProp = false\n      , reflect = false\n    } = (this.constructor as typeof BaseElement).classProperties.get(propertyKey) || defaultPropertyDeclaration;\n\n    if (modified.call(this, oldValue, newValue)) {\n      this.styleElement.innerHTML = this.updateStyle();\n      this.template.innerHTML = this.updateTemplate();\n\n      // ! set template and style render flags correctly\n      this.requestRender(true, true, reflect);\n    }\n  }\n\n  requestRender(dirtyTemplate: boolean, dirtyStyle: boolean, dirtyAttribute: boolean) {\n    this.preRenderHook();\n    this._rAFScheduled(dirtyTemplate, dirtyStyle, dirtyAttribute);\n  }\n\n\t/**\n\t * Invoked each time the custom element will becommitted to the DOM.\n\t *\n\t * @override\n\t * @memberof BaseElement\n\t */\n  // eslint-disable-next-line\n  preRenderHook() { }\n\n\t/**\n\t * Invoked each time the custom element is committed to the DOM\n\t *\n\t * @protected\n\t * @param {boolean} dirtyTemplate Flag indicating template rerender\n\t * @param {boolean} dirtyStyle Flag indicating style rerender\n\t * @param {boolean} dirtyAttribute Flag indicating attribute update\n\t * @memberof BaseElement\n\t */\n  render(dirtyTemplate: boolean, dirtyStyle: boolean, dirtyAttribute: boolean) {\n    if (dirtyStyle) { this._renderRoot.appendChild(this.styleElement); }\n\n    // Does not clone the DocumentFragment, instead rips it from the template and\n    // places it into the render node. This way the element will retain the references\n    // of objects within the template.\n    if (dirtyTemplate) { this._renderRoot.appendChild(this.template.content); }\n    if (dirtyAttribute) { this.reflectAttributes(); }\n  }\n}\n","import { customelementprefix } from '../../../package.json';\nimport { InputType, AutocompleteValue } from '../../types';\nimport { BaseElement, defineElement, debounce, attr2bool } from '../Base/base-element';\n\n\n//* Class **********************************************************************\n@defineElement(`${customelementprefix}-textfield`)\nexport class TextField extends BaseElement {\n//* Constructor ****************************************************************\n\n\n\n//* Properties - Getter/Setter *************************************************\n  private _formElement: HTMLInputElement | HTMLTextAreaElement | undefined;\n  get formElement(): HTMLInputElement | HTMLTextAreaElement {\n    if (!this._formElement) this._formElement = this.template.content.querySelector('#form-elem')! as HTMLInputElement | HTMLTextAreaElement;\n    return this._formElement;\n  }\n\n  private _labelElem: HTMLLabelElement | undefined;\n  get labelElement(): HTMLLabelElement {\n    if (!this._labelElem) this._labelElem = this.template.content.querySelector('label')!;\n    return this._labelElem;\n  }\n\n  // General Input attr\n  private _autocomplete: AutocompleteValue | boolean = false;\n  get autocomplete() { return this._autocomplete as AutocompleteValue; }\n  set autocomplete(val: AutocompleteValue) {\n    this._autocomplete = val;\n    Reflect.set(this.formElement, 'autocomplete', this._autocomplete);\n  }\n\n  private _autofocus: boolean = false;\n  get autofocus() { return this._autofocus; }\n  set autofocus(val: any) {\n    this._autofocus = attr2bool(val);\n    Reflect.set(this.formElement, 'autofocus', this._autofocus);\n  }\n\n  private _disabled: boolean = false;\n  get disabled() { return this._disabled; }\n  set disabled(val: any) {\n    this._disabled = attr2bool(val);\n    Reflect.set(this.formElement, 'disabled', this._disabled);\n  }\n\n  private _form: string | null = null;\n  // get form() { return this.formElem.getAttribute('form') || ''; }\n  // set form(val: string) { this.formElem.setAttribute('form', val); }\n\n  private _list: string | null = null;\n  // get list() { return this.formElem.getAttribute('list') || ''; }\n  // set list(val: string) { this.formElem.setAttribute('list', val)}\n\n  private _name: string = '';\n  get name() { return this._name; }\n  set name(val) { this.formElement.name = this._name = val; }\n\n  private _readOnly: boolean = false;\n  get readOnly() { return this._readOnly; }\n  set readOnly(val: any) { this.formElement.readOnly = this._readOnly = attr2bool(val); }\n\n  private _required: boolean = false;\n  get required() { return this._required; }\n  set required(val: any) { this.formElement.required = this._required = attr2bool(val); }\n\n  private _type: InputType = 'text';\n  get type() { return this._type as InputType; }\n  set type(val) { if (this.formElement instanceof HTMLInputElement) this.formElement.type = this._type = val; }\n\n  private _value: string = '';\n  get value() { return this._value; }\n  set value(val) {\n    this._value = val;\n    if (this.formElement.value !== this._value) this.formElement.value = this._value;\n  }\n\n  private _placeholder: string = '';\n  get placeholder() { return this._placeholder; }\n  set placeholder(val) { this.formElement.placeholder = this._placeholder = val; }\n\n  private _multiline: boolean | number = false;\n  get multiline() { return this._multiline; }\n  set multiline(val) { this._multiline = val; }\n\n  // PreciseUI\n  borderless: boolean = false;\n  className: string = '';\n  clearable: boolean = false;\n  defaultValue: string = '';\n  error: string = ''; // error message below input\n  icon: any; // Sets an optional default icon (if any) to use when no error or clearable is given. - we have slots\n  info: string = ''; // info instead of error\n  label: string = '';\n  maxLength: number = -1;\n  minLenght: number = -1;\n  prefix: string = '';\n  resizable: 'both' | 'horizontal' | 'vertical' | 'none' = 'none'; //! API change, was: boolean | 'auto' | 'vertical' | 'horizontal' = false\n  // style: string = ''; // not possible as string, has to be a CSSStyleDeclaration for this exact property name\n  // suffix: string = '';\n  // theme: string = ''; //TODO figure out how to use themes within wc\n  // Eventhandler\n  // onBlur: CallableFunction = noop;\n  // onChange: CallableFunction = noop;\n  // onClear: CallableFunction = noop;\n  // onFocus: CallableFunction = noop;\n  // onInput: CallableFunction = noop;\n\n\n\n//* Template *******************************************************************\n  protected renderStyle() {\n    return `\n.text-field-container {\n  position: relative;\n}\n.stack-pannel {\n  display: flex;\n  justify-content: flex-start;\n}\n#prefix,\n#suffix {\n  align-items: center;\n  background: rgb(239, 239, 239);\n  color: rgb(114, 114, 114);\n  display: flex;\n  font-size: 1rem;\n  padding: 1rem;\n}\nlabel {\n  display: flex;\n  flex-flow: column-reverse;\n  flex-grow: 1;\n  height: 100%;\n  margin: auto;\n  min-width: 0px;\n  position: relative;\n\n  align-items: center;\n  background: rgb(248, 248, 248);\n  border-bottom: 1px solid rgb(239, 239, 239);\n  box-shadow: none;\n  box-sizing: border-box;\n  cursor: auto;\n  display: flex;\n  flex: 1 1 0%;\n  margin: 0px;\n  max-height: 112px;\n  min-height: 54px;\n  overflow-y: auto;\n}\ninput {\n  -webkit-appearance: none;\n  background: none;\n  border-color: initial;\n  border-image: initial;\n  border-radius: 0px;\n  border-style: none;\n  border-width: initial;\n  box-shadow: none;\n  box-sizing: border-box;\n  color: rgb(62, 62, 62);\n  cursor: auto;\n  font-family: inherit;\n  font-size: 1rem;\n  height: 100%;\n  margin: 0px;\n  padding: 1.5rem 1rem 0.5rem;\n  transition: all 0.2s ease 0s;\n  width: 100%;\n}\ntextarea {\n  background: rgb(248, 248, 248);\n  border-bottom: 1px solid rgb(211, 211, 211);\n  border-image: initial;\n  border-left-color: initial;\n  border-left-width: initial;\n  border-radius: 0px;\n  border-right-color: initial;\n  border-right-width: initial;\n  border-style: none none solid;\n  border-top-color: initial;\n  border-top-width: initial;\n  box-shadow: none;\n  box-sizing: border-box;\n  color: rgb(114, 114, 114);\n  cursor: auto;\n  font-family: inherit;\n  font-size: 1rem;\n  margin: 0px;\n  padding: 1.5rem 1rem 0.5rem;\n  resize: ${this.resizable};\n  width: 100%;\n}\n#form-elem:disabled {\n  -webkit-appearance: none;\n  background: none;\n  border-color: initial;\n  border-image: initial;\n  border-radius: 0px;\n  border-style: none;\n  border-width: initial;\n  box-shadow: none;\n  box-sizing: border-box;\n  color: rgb(180, 180, 180);\n  cursor: not-allowed;\n  font-family: inherit;\n  font-size: 1rem;\n  height: 100%;\n  margin: 0px;\n  padding: 1rem;\n  transition: all 0.2s ease 0s;\n  width: 100%;\n}\n#description {\n  background: transparent;\n  box-sizing: border-box;\n  /* color: rgb(114, 114, 114); */\n  cursor: text;\n  display: block;\n  font-size: 0.75rem;\n  left: 1rem;\n  line-height: 1rem;\n  max-width: 66.66%;\n  overflow: hidden;\n  padding-top: 0.5rem;\n  position: absolute;\n  right: 0px;\n  text-overflow: ellipsis;\n  top: 0px;\n  transform-origin: left bottom;\n  /* transform: translate(0px, 0.85rem) scale(1.33); */\n  transition: all 0.2s ease 0s;\n  white-space: nowrap;\n}\n#form-elem:focus + #description {\n  color: rgb(0, 139, 208);\n  /* transform: none; */\n}`};\n\n  private renderIcon = () => this.icon ? this.icon : `Icon/ErrorIco`;\n  //@ts-ignore-next-line\n  private attr2string = () => (this.constructor as typeof TextField).observedAttributes.map((val) => val in this ? `${val}=\"${this[val]}\"` : '').join(' ');\n  private renderInput = () => `<input id=form-elem ${this.attr2string()} />`;\n  private renderTextarea = () => `<textarea id=form-elem ${this.attr2string()} ${typeof this._multiline === 'number' ? `row=${this._multiline}` : ''}></textarea>`;\n\n  renderTemplate() {\n    return `\n<div class=text-field-container>\n  <div class=stack-pannel>\n    <span id=prefix><slot name=prefix>Prefix</slot></span>\n    <label>\n      ${this._multiline ? this.renderTextarea() : this.renderInput()}\n      <span id=description><slot>Description/Label/Error/Info</slot></span>\n      <i class=defaultIcon><slot name=icon>${this.renderIcon()}</slot></i>\n    </label>\n    <span id=suffix><slot name=suffix>Suffix</slot></span>\n  </div>\n</div>`;\n  }\n\n\n\n//* Obervers/Handlers **********************************************************\n  static get observedAttributes() { return ['autocomplete', 'autofocus', 'disabled', 'form', 'list', 'multiline', 'name', 'placeholder', 'readOnly', 'required', 'type', 'value']; }\n\n  //@ts-ignore-next-line\n  attributeChangedCallback(attrName: string, oldValue: any, newValue: string) { if (attrName in this) this[attrName] = newValue }\n\n  //@ts-ignore-next-line\n  forwardProperty(targetElement: HTMLElement, key: string | number, val: any) { if (targetElement && key in targetElement) targetElement[key] = val; }\n\n\n\n//* Life Cycle Callbacks *******************************************************\n  preCommitHook() {\n    this.formElement.addEventListener('change', debounce(() => this.value = this.formElement.value, 50));\n  }\n}\n","import { customelementprefix } from '../../../package.json';\nimport { BaseElement, defineElement, property, attr2bool, bool2attr } from '../Base/base-element';\n\n@defineElement(`${customelementprefix}-card`)\nexport class Card extends BaseElement {\n  //! API change, was: orientation: 'horizontal' | 'vertical' = 'vertical';\n  @property({ reflect: true })\n  direction: 'row' | 'column' = 'column';\n\n  @property({ reflect: true })\n  layout: string = '';\n\n  get layoutCSS () {\n    return (this.layout.match(/\\d/gu) || [])\n      .map((val, key) => `.card > :nth-child(${key + 1}) {flex:${val} 1 auto;}`)\n      .join('\\n');\n  }\n\n\n\n  updateTemplate() {\n    return `<section class=\"card\">\n  <div class=\"card-header\"><slot name=header></slot></div>\n  <div class=\"card-media\"><slot name=media></slot></div>\n  <div class=\"card-body\"><slot name=body></slot></div>\n  <div class=\"card-footer\"><slot name=footer></slot></div>\n</section>`;\n  }\n\n  updateStyle() {\n    return `\n.card {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: ${this.direction};\n  justify-content: flex-start;\n  padding: 1rem;\n}\n${this.layoutCSS}`;\n  }\n}\n","import { customelementprefix } from '../../../package.json';\nimport { BaseElement, defineElement, property } from '../Base/base-element';\n\n@defineElement(`${customelementprefix}-container`)\nexport class Container extends BaseElement {\n  @property({ reflect: true })\n  align: 'center' | 'left' | 'right' = 'center';\n\n  @property({ reflect: true })\n  maxWidth: number | null = null;\n\n  updateTemplate() {\n    return `<div class=container>\n  <slot></slot>\n</div>`;\n  }\n\n  updateStyle() {\n    return `.container {\n  display: flex;\n  justify-content: ${this.align === 'center' ? 'center' : `flex-${this.align === 'left' ? 'left' : 'right'}`};\n  ${this.maxWidth === null ? `max-width: ${this.maxWidth}` : ''}\n}`;\n  }\n}\n","import { customelementprefix } from '../../../package.json';\nimport { BaseElement, defineElement, property } from \"../Base/base-element\";\n\n@defineElement(`${customelementprefix}-content-switch`)\nexport class ContentSwitch extends BaseElement {\n  @property({\n    reflect: true\n    , attr2prop(val: string) { return Number(val); }\n    , prop2attr(val: number) { return String(val); }\n  })\n  defaultIndex: number = 1;\n\n  @property({\n    reflect: true\n    , attr2prop(val: string) { return Number(val); }\n    , prop2attr(val: number) { return String(val); }\n  })\n  selectedIndex: number = 1;\n\n  @property({ reflect: true })\n  orientation: 'vertical' | 'horizontal' = 'horizontal';\n\n  updateTemplate() {\n    return `<div class=content-switch>\n  <slot></slot>\n</div>`;\n  }\n\n  updateStyle() {\n    return ``;\n  }\n}\n"],"names":["identity","val","attr2bool","isDifferent","oldValue","newValue","Object","is","debounce","func","wait","immediate","TypeError","timeout","args","callNow","clearTimeout","setTimeout","apply","this","rAFthrottle","rAFid","later","requestAnimationFrame","defaultPropertyDeclaration","observe","reflect","prop2attr","attr2prop","modified","defineElement","name","options","classDescriptor","finisher","classConstructor","customElements","define","property","propertyDeclaration","propertyDescriptor","kind","propertyKey","key","extras","placement","initializer","descriptor","configurable","enumerable","writable","get","set","oldVal","requestUpdate","addClassProperty","BaseElement","HTMLElement","constructor","render","bind","attachShadow","mode","shadowRoot","_renderRoot","Error","ret","classProperties","forEach","push","prototype","hasOwnProperty","call","defineProperty","value","Map","_classProperties","assign","_template","document","createElement","_styleElement","updateTemplate","updateStyle","reflectAttributes","prop","removeAttribute","setAttribute","attributeChangedCallback","attrName","connectedCallback","isConnected","styleElement","innerHTML","template","requestRender","dirtyTemplate","dirtyStyle","dirtyAttribute","preRenderHook","_rAFScheduled","appendChild","content","TextField","_formElement","querySelector","_labelElem","_autocomplete","Reflect","formElement","_autofocus","_disabled","_name","_readOnly","readOnly","_required","required","_type","HTMLInputElement","type","_value","_placeholder","placeholder","_multiline","resizable","icon","observedAttributes","map","join","attr2string","renderTextarea","renderInput","renderIcon","targetElement","addEventListener","Card","layout","match","direction","layoutCSS","Container","align","maxWidth","ContentSwitch","Number","String"],"mappings":"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"}